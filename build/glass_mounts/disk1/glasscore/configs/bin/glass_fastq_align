#!/bin/bash

# Wrapper to run docker based DNA alignments pipeline for GLASS consortium
# docker.glass-consortium.org

# usage
show_help() {

cat << EOF

Wrapper to run docker based DNA alignment workflow using fastq as starting point
Visit http://docker.glass-consortium.org on getting started with workflows

Usage: ${0##*/} -s <UNIQUE SAMPLE NAME> -a <FILENAME OF FASTQ MAPPING TABLE> -m <RUN MODE (WGS|WES; default: WGS)> \
                -t <RUN TYPE (DRY|GO; default: DRY)> -d1 <PATH TO DISK1 (default:/mnt/disk1)> \
                -d1 <PATH TO DISK2 (default:/mnt/disk2)> | tee -a ~/glass_run.log

    -h  display this help and exit
        -s  unique sample_barcode (Required: This will be used to annotate bam headers and name output files)
        -a  filename (and not full path) of fastq mapping table. 
            Place this file under /mnt/disk2/glassdata/inputs/fqs/sample_barcode/ path
            default is <sample_barcode>_mapping_table.tsv

        -m  run mode: WGS or WES (default: WGS; select WES if input fastqs are from whole exome or other target capture based assay)
        -t  run type: DRY or GO (default: DRY; GO will execute actual pipeline on a compute node)
        -r  path to reference data disk1 base (default: /mnt/disk1)
        -e  path to storage data disk2 base (default: /mnt/disk2)
            Read http://docker.glass-consortium.org on setting up disk mounts by downloading pre-built reference datasets.

Assuming disk1 and disk2 are mounted at /mnt/, run typical dry run for WGS derived fastq for sample X using:
${0##*/} -s sampleX_barcode -a sampleX_mapping_table.tsv | tee -a ~/glass_run.log

To switch to whole exome derived fastq files, do:
${0##*/} -s sampleX_barcode -a sampleX_mapping_table.tsv -m WES | tee -a ~/glass_run.log

To switch from dry run to an actual run on a compute node, add -t GO argument, e.g.,:
${0##*/} -s sampleX_barcode -a sampleX_mapping_table.tsv -m WES -t GO | tee -a ~/glass_run.log

PS:
In all cases, raw fastq files and related mapping file must be under 
/mnt/disk2/glassdata/inputs/fqs/<sample_barcode>/ directory

Mapping table given at -a flag has strict tsv format: Visit http://docker.glass-consortium.org for details

EOF

}

if [[ $# == 0 ]];then show_help;exit 1;fi

while getopts "s:a:m:t:r:e:h" opt; do
    case "$opt" in
        h) show_help;exit 0;;
        s) SAMPLE_UUID=$OPTARG;;
        a) MFILEID=$OPTARG;;
        m) RUNMODE=$OPTARG;;
        t) RUNTYPE=$OPTARG;;
        r) DISK1=$OPTARG;;
        e) DISK2=$OPTARG;;
       '?')show_help >&2 exit 1 ;;
    esac
done

DISK1=${DISK1:-"/mnt/disk1"}
DISK2=${DISK2:-"/mnt/disk2"}

GLASSCORE=${DISK1}/glasscore
GLASSFLOW=${GLASSCORE}/workflows/glass_docker_dnaseq_alignment
GLASS_SCRATCH=${DISK1}/scratch
GLASSREF=${GLASS_SCRATCH}/refdata/bundle

GLASSDATA=${DISK2}/glassdata
INPUTDIR=${GLASSDATA}/inputs/fqs/${SAMPLE_UUID}

## exit if GLASS base directory is not present or does not meet required subdirectory structure.

if [[ ! -d ${DISK1} || ! -d ${DISK2} || ! -d ${GLASSFLOW} || ! -d ${GLASSREF} || ! -d ${INPUTDIR} ]]; then
cat << EOF

    ############################################## ERROR ###############################################################

    One of following is causing an error:

    GLASS base directories does not exist at ${DISK1} for DISK1 and/or ${DISK2} for DISK2.

    GLASS base directory does not seem to have required subdirectory structure, i.e.,
      Workflow code should be at /path_to_disk1/glasscore/workflows/glass_docker_dnaseq_alignment/ ; 
      Currently it is at ${GLASSFLOW} ;
      
      GATK bundle and other reference data should be at /path_to_disk1/scratch/refdata/bundle/ ; 
      Currently it is at ${GLASSREF} ;
      
      Input directory where sample wise fastq files and mapping table should be at 
      /path_to_disk2/glassdata/inputs/fqs/<sample_barcode>/ directory ; 
      Currently it is at ${INPUTDIR} ;
      
      You can override default base directories with -r for disk1 and -e for disk2 flag.
      See example below or visit http://docker.glass-consortium.org on downloading pre-built reference datasets.

      ##################################################################################################################

EOF
    show_help
    exit 1
fi

## exit if unique sample name and/or mapping file is not provided at the given location

TEMP_MAPFILE=$(printf "%s_mapping_table.tsv" "${SAMPLE_UUID}")
MFILEID=${MFILEID:-"$TEMP_MAPFILE"}
MAPFILE=$(printf "%s/%s" "${INPUTDIR}" "${MFILEID}")

if [[ -z ${SAMPLE_UUID} || -z ${MFILEID} || ! -s ${MAPFILE} ]]; then
cat << EOF

    ############################################## ERROR ###############################################################

    One of following is causing an error:

    sample unique name and/or mapping file is incorrectly specified, i.e.,
      Sample unique name is required using -s flag and should not have any space or special characters.
      Currently it is ${SAMPLE_UUID} ;
      
    Input directory where mapping file is placed should be at location:
      /path_to_disk2/glassdata/inputs/fqs/<sample_barcode>/<mapping_table.tsv> ;
      Currently mapping file name is ${MFILEID} and it is at location:
      ${MAPFILE}
      PS: If ${MAPFILE} is empty, docker container will not start and give this error.

      See example below or visit http://docker.glass-consortium.org setting up pre-built disk mount structure

      ##################################################################################################################

EOF
    show_help
    exit 1
fi

## make docker container ID
TSTAMP=$(date +%d%b%y_%H%M%S%Z)
DOCKID=$(printf "%s_%s" "${SAMPLE_UUID}" "${TSTAMP}")

## switch to WGS mode unless -m WES
RUNMODE=${RUNMODE:-WGS}

if [[ "${RUNMODE}" != "WGS" && "${RUNMODE}" != "WES" ]]; then
  echo -e "\n## WARNING ##\nIncorrect RUNMODE argument: ${RUNMODE}\n"
  echo -e "Supply -m with either WGS or WES\nSwitching to default WGS mode\n"

  RUNMODE=${RUNMODE:-WGS}
fi

## switch to dry run unless -t GO

RUNTYPE=${RUNTYPE:-DRY}

if [[ "${RUNTYPE}" != "GO" ]]; then

cat << EOF
      
      ##### INFO #####
      docker run will be in dry mode because you have either not used -t flag or 
      specified following: -t ${RUNTYPE}

      To run actual analysis pipeline, use -t GO option.

EOF

      FLOWRUN="FALSE"

else

cat << EOF
      
      ##### INFO #####
      docker run will be run on an actual compute node because you have you have specified following: -t ${RUNTYPE}

      For dry run, use -t DRY or leave -t flag out from command.

EOF
    ## set flowr execute status
    FLOWRUN="TRUE"
fi

#################################### Initiate docker run in dry or actual run mode #####################################

## import user id mapping variables, if present

if [[ -x "${GLASSCORE}"/configs/bin/get_user_group_host_ids.sh ]]; then

  ## source script to get user and group ids and import env variables
  . "${GLASSCORE}"/configs/bin/get_user_group_host_ids.sh

  idmapping_exitstat=$?
  printf "\nSourced %s/configs/bin/get_user_group_host_ids.sh with exit code: %s" "${GLASSCORE}" "${idmapping_exitstat}"
  printf "\n#### HOST USER INFO ####\nUSER:%s\nUID:%s\nGROUP:%s\nGID:%s\n########################\n" "${MYUSER}" "${MYUID}" "${MYGROUP}" "${MYGID}"

else

cat << EOF

        ##### WARNING #####
        Unable to locate or properly source "${GLASSCORE}"/configs/bin/get_user_group_host_ids.sh
        Attempting one more time to map user and group ids
EOF

  export MYUSER=${MYUSER:-"$USER"}
  export MYGROUP=${MYGROUP:-$(id -gn "$USER")}
  export MYUID=${MYUID:-"$UID"}
  export MYGID=${MYGID:-$(id -g "$USER")}

  printf "\n#### HOST USER INFO ####\nUSER:%s\nUID:%s\nGROUP:%s\nGID:%s\n########################\n" "${MYUSER}" "${MYUID}" "${MYGROUP}" "${MYGID}"

fi

###### export env variables #######
## export disk mount variables
export GLASSCORE
export GLASS_SCRATCH
export GLASSDATA
export DOCKID
export MFILEID
export SAMPLE_UUID
export FLOWRUN

## export variables which are in reference to paths internal to docker container
DOCKCODE="/mnt/glasscore/workflows/glass_docker_dnaseq_alignment"
export DOCKCODE

DOCKMAPDIR=$(printf "/mnt/glassdata/inputs/fqs/%s" "${SAMPLE_UUID}")
export DOCKMAPDIR
#####################################

##### Create command to run docker container #####

## default to WGS mode unless WES is specified

if [[ ${RUNMODE} == "WES" ]]; then

  echo -e "\n#### INFO ####\nUsing WES alignment workflows because RUNMODE is ${RUNMODE}\n###########\n"

  DOCKCMD=$(printf "docker run -d --name %s -e HOSTUSER=%s -e HOSTGROUP=%s -e HOSTUSERID=%s -e HOSTGROUPID=%s -v %s:/mnt/glasscore -v %s:/mnt/scratch -v %s:/mnt/glassdata glasstools/keystone:1.2.2 \"-c cd %s/flowr && flowr run x=flowr_aln_fqs_wes fqs_map_file=\"%s/%s\" sample_name=\"%s\" platform=local execute=%s\"" "${DOCKID}" "${MYUSER}" "${MYGROUP}" "${MYUID}" "${MYGID}" "${GLASSCORE}" "${GLASS_SCRATCH}" "${GLASSDATA}" "${DOCKCODE}" "${DOCKMAPDIR}" "${MFILEID}" "${SAMPLE_UUID}" "${FLOWRUN}")
else
  DOCKCMD=$(printf "docker run -d --name %s -e HOSTUSER=%s -e HOSTGROUP=%s -e HOSTUSERID=%s -e HOSTGROUPID=%s -v %s:/mnt/glasscore -v %s:/mnt/scratch -v %s:/mnt/glassdata glasstools/keystone:1.2.2 \"-c cd %s/flowr && flowr run x=flowr_aln_fqs fqs_map_file=\"%s/%s\" sample_name=\"%s\" platform=local execute=%s\"" "${DOCKID}" "${MYUSER}" "${MYGROUP}" "${MYUID}" "${MYGID}" "${GLASSCORE}" "${GLASS_SCRATCH}" "${GLASSDATA}" "${DOCKCODE}" "${DOCKMAPDIR}" "${MFILEID}" "${SAMPLE_UUID}" "${FLOWRUN}")
fi

## Run docker run command with strict error checking:
set -e
echo -e "\n#### Now running following docker run command ####\nUnless docker run syntax is incorrect, detailed summary of running container will be displayed at the end.\n"
echo -e "${DOCKCMD}\n"

####### Following line will submit docker command ########
DOCKRUN=$(eval "${DOCKCMD}")
EXITSTAT=$?
set +e

## PRINT SUMMARY IF COMMAND SUCCEEDS:

cat << EOF

####################################################################################
Summary of variables supplied to docker run command at ${TSTAMP}

SAMPLE UUID: ${SAMPLE_UUID}
mapping file: ${MAPFILE}
RUN MODE: ${RUNMODE}
RUN TYPE: ${RUNTYPE}

DISK1 HOST PATH: ${DISK1}
DISK2 HOST PATH: ${DISK2}
GLASS CODE DIRECTORY: ${GLASSFLOW}
GLASS REFERENCE DATA: ${GLASSREF}
GLASS OUTPUT PATH: ${GLASSDATA}/flowr/${SAMPLE_UUID}_<UUID assigned by flowr>

#### Docker run command ####

${DOCKCMD}

Above command was run with exit code: ${EXITSTAT}. 
This exit code does not indicate exit status of docker container. For the latter, use:
docker ps -a --filter "id=${DOCKRUN}"

#######################################

Docker container name: ${DOCKID}
Docker container ID: ${DOCKRUN}

You may check container status by:
docker ps -a --filter "id=${DOCKRUN}"

You may get container logs by:
docker logs ${DOCKID} 2> ~/docker_stdout.log

RUN TYPE: ${RUNTYPE} or ${FLOWRUN} ; GO or TRUE means it will submit commands to a compute node.

If RUN TYPE was GO, variant calls and log files will be saved at following directory:
${GLASSDATA}/flowr/${SAMPLE_UUID}_<UUID assigned by flowr>/
####################################################################################

EOF

## END ##
