#!/bin/bash
## SET UP GLASS ENV ##
## Startup script from mounted volume for docker containers running GLASS Workflows
# 10-2017 | @sbamin
# v 1.1.0
# http://docker.glass-consortium.org/
#

echo -e "\nIf user profile.d was loaded correctly, R_LIBS_USER is $R_LIBS_USER"
echo -e "Running container with following UID and GID"
id -a "${USER}"
echo -e "\n#### Container environment ####"
env
echo -e "\n###########################################################\n"
## END ##

GCMDPREFIX="singularity run --app goglass -B /mnt/disk1/glasscore:/mnt/glasscore -B /mnt/disk1/scratch:/mnt/scratch -B /mnt/disk2/glassdata:/mnt/glassdata glasstools_keystone_beta.simg"

# usage
show_help() {

cat << EOF

Example workflow

Visit http://docker.glass-consortium.org on getting started with workflows

Usage: ${GCMDPREFIX} -m DNA -t align -i fqs -s sample_barcode -f mapping_table.tsv -d wes -n GO
where /mnt/disk1 and /mnt/disk2 are paths to disk1 and disk2 on the host machine.
Visit http://docker.glass-consortium.org for details on setting up disk mounts.

-m or mode: DNA (Others: RNA)
-t or type: align (Others: mutect, mutect2, varscan2 for DNA; align, star, prada for RNA)
-i or input: fqs for paired-end fastq (Others: bam for paired-end legacy bam files or level 1 aligned bam files from GLASS workflows for variant calling or RNAseq analyses)
-s or unique sample barcode, preferably containing immutable uuid
-f or mapping table: required for DNA alignments to get details on read groups for multi-lane sequenced samples
-d or data type: WGS or WES for alignments
-n or run type: DRY (test run) or GO (actual run)

To switch to whole genome derived fastq files, do:
${GCMDPREFIX} -m DNA -t align -i fqs -s sample_barcode -f mapping_table.tsv -d wgs -n GO

For dry run, e.g.,:
${GCMDPREFIX} -m DNA -t align -i fqs -s sample_barcode -f mapping_table.tsv -d wgs -n DRY

In all cases, place raw fastq files and related mapping file under 
<path to disk2>/glassdata/inputs/fqs/<sample_barcode>/ directory

Default mapping table filename is <sample_barcode>_mapping_table.tsv

Mapping table given at -a flag has specific tsv format: Visit http://docker.glass-consortium.org for details

EOF

}

if [[ $# == 0 ]];then show_help;exit 1;fi

while getopts "m:t:i:s:f:d:n:h" opt; do
    case "$opt" in
        h) show_help;exit 0;;
        m) GSOURCE=$OPTARG;;
        t) GTYPE=$OPTARG;;
        i) GINPUT=$OPTARG;;        
        s) GBARCODE=$OPTARG;;
        f) GMAPFILE=$OPTARG;;
        d) GMODE=$OPTARG;;
        n) GRUNTYPE=$OPTARG;;
       '?')show_help >&2 exit 1 ;;
    esac
done

## internal disk mount path specific to container
## defaults to /mnt unless GDISK1 and GDISK2 env variables exist.
DISK1=${GDISK1:-"/mnt"}
DISK2=${GDISK2:-"/mnt"}

GLASSCORE=${DISK1}/glasscore
GLASSFLOW=${GLASSCORE}/workflows/glass_docker_dnaseq_alignment
GLASS_SCRATCH=${DISK1}/scratch
GLASSREF=${GLASS_SCRATCH}/refdata/bundle

GLASSDATA=${DISK2}/glassdata
INPUTDIR=${GLASSDATA}/inputs/fqs/${GBARCODE}

## exit if GLASS base directory is not present or does not meet required subdirectory structure.

if [[ ! -d ${DISK1} || ! -d ${DISK2} || ! -d ${GLASSFLOW} || ! -d ${GLASSREF} || ! -d ${INPUTDIR} ]]; then
cat << EOF

    ############################################## ERROR ###############################################################

    One of following is causing an error:

    GLASS base directories does not exist at ${DISK1} for DISK1 and/or ${DISK2} for DISK2.

    GLASS base directory does not seem to have required subdirectory structure, i.e.,
      Workflow code should be at /path_to_disk1/glasscore/workflows/glass_docker_dnaseq_alignment/ ; 
      Currently it is at ${GLASSFLOW} ;
      
      GATK bundle and other reference data should be at /path_to_disk1/scratch/refdata/bundle/ ; 
      Currently it is at ${GLASSREF} ;
      
      Input directory where sample wise fastq files and mapping table should be at 
      /path_to_disk2/glassdata/inputs/fqs/<sample_barcode>/ directory ; 
      Currently it is at ${INPUTDIR} ;
      
      ${GCMDPREFIX} -h for help or visit http://docker.glass-consortium.org on downloading pre-built reference datasets.

      ##################################################################################################################

EOF
    exit 1
fi

## exit if unique sample name and/or mapping file is not provided at the given location

TEMP_MAPFILE=$(printf "%s_mapping_table.tsv" "${GBARCODE}")
MFILEID=${GMAPFILE:-"$TEMP_MAPFILE"}
MAPFILE=$(printf "%s/%s" "${INPUTDIR}" "${MFILEID}")

if [[ -z ${GBARCODE} || -z ${MFILEID} || ! -s ${MAPFILE} ]]; then
cat << EOF

    ############################################## ERROR ###############################################################

    One of following is causing an error:

    sample unique name and/or mapping file is incorrectly specified, i.e.,
      Sample unique name is required using -s flag and should not have any space or special characters.
      Currently it is ${GBARCODE} ;
      
    Input directory where mapping file is placed should be at location:
      /path_to_disk2/glassdata/inputs/fqs/<sample_barcode>/<sample_barcode>_mapping_table.tsv ;
      Currently mapping file name is ${GMAPFILE} and it is at location:
      ${MAPFILE}
      PS: If ${MAPFILE} is empty, container will not start and return this error.

      ${GCMDPREFIX} -h for help or visit http://docker.glass-consortium.org setting up pre-built disk mount structure

      ##################################################################################################################

EOF
    exit 1
fi

## make container ID
TSTAMP=$(date +%d%b%y_%H%M%S%Z)
DOCKID=$(printf "%s_%s" "${GBARCODE}" "${TSTAMP}")

## switch to WGS mode unless -m WES
RUNMODE=${GMODE:-WGS}

if [[ "${RUNMODE}" != "WGS" && "${RUNMODE}" != "WES" ]]; then
  echo -e "\n## WARNING ##\nIncorrect RUNMODE argument: ${RUNMODE}\n"
  echo -e "Supply -d with either WGS or WES\nSwitching to default WGS mode\n"

  RUNMODE=${RUNMODE:-WGS}
fi

## switch to dry run unless -n GO

RUNTYPE=${GRUNTYPE:-DRY}

if [[ "${RUNTYPE}" != "GO" ]]; then

cat << EOF
      
      ##### INFO #####
      container run will be in dry mode because you have either not used -n flag or 
      specified following: -n ${GRUNTYPE}

      To run actual analysis pipeline, use -n GO option.

EOF

      FLOWRUN="FALSE"

else

cat << EOF
      
      ##### INFO #####
      container run will be on an actual compute node because you have you have specified following: -n ${RUNTYPE}

      For dry run, use -n DRY or leave -n flag out from command.

EOF
    ## set flowr execute status
    FLOWRUN="TRUE"
fi

#################################### Initiate container run in dry or actual run mode #####################################

## import user id mapping variables, if present
## disable user id mapping for singularity runs

# if [[ -x "${GLASSCORE}"/configs/bin/get_user_group_host_ids.sh ]]; then

#   ## source script to get user and group ids and import env variables
#   . "${GLASSCORE}"/configs/bin/get_user_group_host_ids.sh

#   idmapping_exitstat=$?
#   printf "\nSourced %s/configs/bin/get_user_group_host_ids.sh with exit code: %s" "${GLASSCORE}" "${idmapping_exitstat}"
#   printf "\n#### HOST USER INFO ####\nUSER:%s\nUID:%s\nGROUP:%s\nGID:%s\n########################\n" "${MYUSER}" "${MYUID}" "${MYGROUP}" "${MYGID}"

# else

# cat << EOF

#         ##### WARNING #####
#         Unable to locate or properly source "${GLASSCORE}"/configs/bin/get_user_group_host_ids.sh
#         Attempting one more time to map user and group ids
# EOF

#   export MYUSER=${MYUSER:-"$USER"}
#   export MYGROUP=${MYGROUP:-$(id -gn "$USER")}
#   export MYUID=${MYUID:-"$UID"}
#   export MYGID=${MYGID:-$(id -g "$USER")}

#   printf "\n#### HOST USER INFO ####\nUSER:%s\nUID:%s\nGROUP:%s\nGID:%s\n########################\n" "${MYUSER}" "${MYUID}" "${MYGROUP}" "${MYGID}"

# fi

###### export env variables #######
## export disk mount variables
export GLASSCORE
export GLASS_SCRATCH
export GLASSDATA
export DOCKID
export MFILEID
export MAPFILE
export GBARCODE
export FLOWRUN
export GLASSFLOW
#####################################

##### Create command to run workflow #####

## default to WGS mode unless WES is specified

if [[ ${RUNMODE} == "WES" ]]; then

  echo -e "\n#### INFO ####\nUsing WES alignment workflows because RUNMODE is ${GMODE}\n###########\n"

  cd "${GLASSFLOW}"/flowr
  DOCKCMD=$(printf "flowr run x=flowr_aln_fqs_wes fqs_map_file=\"%s\" sample_name=\"%s\" platform=local execute=%s\"" "${MAPFILE}" "${GBARCODE}" "${FLOWRUN}")
else
  echo -e "\n#### INFO ####\nUsing WGS alignment workflows because RUNMODE is ${GMODE}\n###########\n"

  cd "${GLASSFLOW}"/flowr
  DOCKCMD=$(printf "flowr run x=flowr_aln_fqs fqs_map_file=\"%s\" sample_name=\"%s\" platform=local execute=%s\"" "${MAPFILE}" "${GBARCODE}" "${FLOWRUN}")
fi

## Evaluate command:
echo -e "\n#### Now running following command ####\n"
echo -e "${DOCKCMD}\n"

####### Following line will submit docker command ########
eval "${DOCKCMD}" | tee -a "${GLASS_SCRATCH}"/logs/"${DOCKID}".log
EXITSTAT=$?

## PRINT SUMMARY OF RUN STATUS:

cat << EOF

####################################################################################
Summary of variables supplied at ${TSTAMP}

SAMPLE UUID: ${GBARCODE}
mapping file: ${GMAPFILE}
RUN MODE: ${GMODE}, actual mode was ${RUNMODE}
RUN TYPE: ${GRUNTYPE}

GLASS CODE DIRECTORY: ${GLASSFLOW}
GLASS REFERENCE DATA: ${GLASSREF}

#### Run command ####

${DOCKCMD}

Above command was run with exit code: ${EXITSTAT}

#######################################

Container name: ${DOCKID}
Log file: "${GLASS_SCRATCH}"/logs/"${DOCKID}".log

RUN TYPE: ${GRUNTYPE} or ${FLOWRUN} ; GO or TRUE means it will submit commands to a compute node.

Check logs for details in GLASS OUTPUT PATH at
${GLASSDATA}/flowr/${SAMPLE_UUID}_<UUID assigned by flowr> and
${GLASS_SCRATCH}/logs/${DOCKID}.log

####################################################################################

EOF

## END ##
